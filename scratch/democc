#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/wifi-module.h"
#include "ns3/click-internet-stack-helper.h"
#include "ns3/log.h"
#include "ns3/mobility-helper.h"
#include "ns3/ipv4-l3-click-protocol.h"

using namespace ns3;

int main (int argc, char *argv[])
{
#ifdef NS3_CLICK
//  LogComponentEnableAll (LOG_LEVEL_INFO);
  LogComponentEnableAll (LOG_PREFIX_FUNC);
  LogComponentEnableAll (LOG_PREFIX_NODE);

  //LogComponentEnable ("PacketSink", LOG_LEVEL_INFO);
  LogComponentEnable ("OnOffApplication", LOG_LEVEL_INFO);

  LogComponentEnable ("Ipv4L3ClickProtocol", LOG_LEVEL_DEBUG);
  LogComponentEnable ("Ipv4ClickRouting", LOG_LEVEL_DEBUG);
  //LogComponentEnable ("WifiNetDevice", LOG_LEVEL_FUNCTION);
  //LogComponentEnable ("MonitorWifiMac", LOG_LEVEL_FUNCTION);
  //LogComponentEnable ("DcaTxop", LOG_LEVEL_FUNCTION);
  //LogComponentEnable ("Packet", LOG_LEVEL_FUNCTION);
  //LogComponentEnable ("RadiotapHeader", LOG_LEVEL_FUNCTION);
  //LogComponentEnable ("YansWifiChannel", LOG_LEVEL_FUNCTION);
  //LogComponentEnable ("YansWifiPhy", LOG_LEVEL_FUNCTION);


  
  double rss = -80;

  // Setup nodes
  NodeContainer monitorWifiNodes;
  monitorWifiNodes.Create (2);
  
  // Get Wifi devices installed on both nodes.
  // Adapted from examples/wireless/wifi-simple-adhoc.cc
  std::string phyMode ("DsssRate1Mbps");

  // disable fragmentation for frames below 2200 bytes
  Config::SetDefault ("ns3::WifiRemoteStationManager::FragmentationThreshold", StringValue ("2200"));
  // turn off RTS/CTS for frames below 2200 bytes
  Config::SetDefault ("ns3::WifiRemoteStationManager::RtsCtsThreshold", StringValue ("2200"));
  // Fix non-unicast data rate to be the same as that of unicast
  Config::SetDefault ("ns3::WifiRemoteStationManager::NonUnicastMode",
                      StringValue (phyMode));
  // Fix max number of retries for an RTS
  Config::SetDefault ("ns3::WifiRemoteStationManager::MaxSsrc", UintegerValue (7));
  // Fix max number of retries for a DATA packet
  Config::SetDefault ("ns3::WifiRemoteStationManager::MaxSlrc", UintegerValue (7));
  // Fix default TX power level
  Config::SetDefault ("ns3::WifiRemoteStationManager::DefaultTxPowerLevel", UintegerValue (0));

  WifiHelper wifi;
  wifi.SetStandard (WIFI_PHY_STANDARD_80211b);

  YansWifiPhyHelper wifiPhy =  YansWifiPhyHelper::Default ();
  // This is one parameter that matters when using FixedRssLossModel
  // set it to zero; otherwise, gain will be added
  wifiPhy.Set ("RxGain", DoubleValue (0) );
  // ns-3 supports RadioTap and Prism tracing extensions for 802.11b
  wifiPhy.SetPcapDataLinkType (YansWifiPhyHelper::DLT_IEEE802_11_RADIO);

  YansWifiChannelHelper wifiChannel;
  wifiChannel.SetPropagationDelay ("ns3::ConstantSpeedPropagationDelayModel");
  // The below FixedRssLossModel will cause the rss to be fixed regardless
  // of the distance between the two stations, and the transmit power
  wifiChannel.AddPropagationLoss ("ns3::FixedRssLossModel","Rss",DoubleValue (rss));
  wifiPhy.SetChannel (wifiChannel.Create ());

  // Add a non-QoS upper mac, and disable rate control
  NqosWifiMacHelper wifiMac = NqosWifiMacHelper::Default ();
  wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",
                                "DataMode",StringValue (phyMode),
                                "ControlMode",StringValue (phyMode));
  // Set it to monitor mode
  wifiMac.SetType ("ns3::MonitorWifiMac");
  NetDeviceContainer monitorWifiDevices = wifi.Install (wifiPhy, wifiMac, monitorWifiNodes);

  for (NetDeviceContainer::Iterator i = monitorWifiDevices.Begin (); i != monitorWifiDevices.End (); ++i)
    {
      Ptr<NetDevice> netdev = *i;
      Ptr<WifiNetDevice> wifinetdev = DynamicCast<WifiNetDevice> (netdev);
      wifinetdev->SetMonitorMode ();    // Sets the NetDevice in Monitor mode
    }

  // Setup mobility models
  MobilityHelper mobility;
  Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
  positionAlloc->Add (Vector (0.0, 0.0, 0.0));
  positionAlloc->Add (Vector (5.0, 0.0, 0.0));
  mobility.SetPositionAllocator (positionAlloc);
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (monitorWifiNodes);

  // Install Click
  ClickInternetStackHelper clickinternet;
//  clickinternet.SetClickFile (monitorWifiNodes.Get (0), "/usr/local/src/ns-3-click-mac-dev/scratch/demo.click");
  clickinternet.SetClickFile (monitorWifiNodes.Get (0), "/tmp/roofnet_bp_ns_1.click");
  clickinternet.SetRoutingTableElement (monitorWifiNodes.Get (0), "rt");
  clickinternet.Install (monitorWifiNodes.Get (0));
//  clickinternet.SetClickFile (monitorWifiNodes.Get (1), "/usr/local/src/ns-3-click-mac-dev/scratch/demo.click");
  clickinternet.SetClickFile (monitorWifiNodes.Get (1), "/tmp/roofnet_bp_ns_2.click");
  clickinternet.SetRoutingTableElement (monitorWifiNodes.Get (1), "rt");
  clickinternet.Install (monitorWifiNodes.Get (1));

  // Configure IP addresses
  Ipv4AddressHelper ipv4;
  ipv4.SetBase ("172.16.1.0", "255.255.255.0");
  Ipv4InterfaceContainer interfaces = ipv4.Assign (monitorWifiDevices);

  // Setup traffic application and sockets
  PacketSinkHelper sink ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), 9));
  sink.SetAttribute ("StartTime", TimeValue (Seconds (5.0)));
  ApplicationContainer sinkApps = sink.Install (monitorWifiNodes.Get (1));

  OnOffHelper onoff ("ns3::UdpSocketFactory", Address (InetSocketAddress (interfaces.GetAddress (1), 9)));
  onoff.SetAttribute ("OnTime", RandomVariableValue (ConstantVariable (1)));
  onoff.SetAttribute ("OffTime", RandomVariableValue (ConstantVariable (0)));
  onoff.SetAttribute ("MaxBytes", UintegerValue (0));
  onoff.SetAttribute ("PacketSize", StringValue ("1024"));
  onoff.SetAttribute ("DataRate", StringValue ("100Kbps"));
  onoff.SetAttribute ("StartTime", TimeValue (Seconds (5.0)));
  ApplicationContainer clientApps = onoff.Install (monitorWifiNodes.Get (0));
  /*Address LocalAddress (InetSocketAddress (Ipv4Address::GetAny (), 50000));
  PacketSinkHelper packetSinkHelper ("ns3::TcpSocketFactory", LocalAddress);
  ApplicationContainer recvapp = packetSinkHelper.Install (monitorWifiNodes.Get (1));
  recvapp.Start (Seconds (5.0));
  recvapp.Stop (Seconds (10.0));

  OnOffHelper onOffHelper ("ns3::TcpSocketFactory", Address ());
  onOffHelper.SetAttribute ("OnTime", RandomVariableValue (ConstantVariable (1)));
  onOffHelper.SetAttribute ("OffTime", RandomVariableValue (ConstantVariable (0)));

  ApplicationContainer appcont;

  AddressValue remoteAddress (InetSocketAddress (Ipv4Address ("172.16.1.2"), 50000));
  onOffHelper.SetAttribute ("Remote", remoteAddress);
  appcont.Add (onOffHelper.Install (monitorWifiNodes.Get (0)));

  appcont.Start (Seconds (5.0));
  appcont.Stop (Seconds (10.0));
*/
  // For tracing
  //wifiPhy.EnablePcap ("/tmp/roofnet-bp", monitorWifiDevices);

  Simulator::Stop (Seconds (0.000001));
  Simulator::Run ();

  Simulator::Destroy ();
  return 0;
#else
  NS_FATAL_ERROR ("Can't use ns-3-click without NSCLICK compiled in");
#endif
}
